{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/form.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nexport class DashboardComponent {\n  constructor(formStateService, formBuilder, router) {\n    this.formStateService = formStateService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  login() {\n    if (this.loginForm.invalid) {\n      // Form is invalid, do not proceed with login\n      return;\n    }\n    const {\n      username,\n      password\n    } = this.loginForm.value;\n    this.formStateService.login({\n      username,\n      password\n    }).subscribe(response => {\n      localStorage.setItem('token', response.token);\n      this.router.navigate(['/formbuilder']);\n    }, error => {\n      console.error('Login failed:', error);\n    });\n  }\n  static #_ = this.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.FormService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 9,\n    vars: 2,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"username\", \"formControlName\", \"username\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\"], [\"type\", \"submit\", 3, \"disabled\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function DashboardComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵelementStart(1, \"label\", 1);\n        i0.ɵɵtext(2, \"Username:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"input\", 2);\n        i0.ɵɵelementStart(4, \"label\", 3);\n        i0.ɵɵtext(5, \"Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 4);\n        i0.ɵɵelementStart(7, \"button\", 5);\n        i0.ɵɵtext(8, \"Login\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\".user[_ngcontent-%COMP%]{\\n    margin: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0FBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiLnVzZXJ7XG4gICAgbWFyZ2luOiAxMHB4O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["Validators","DashboardComponent","constructor","formStateService","formBuilder","router","ngOnInit","initForm","loginForm","group","username","required","password","login","invalid","value","subscribe","response","localStorage","setItem","token","navigate","error","console","_","i0","ɵɵdirectiveInject","i1","FormService","i2","FormBuilder","i3","Router","_2","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","DashboardComponent_Template_form_ngSubmit_0_listener","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty","ɵɵadvance"],"sources":["/Users/rimes/Desktop/NAMAN/frontend1/src/app/components/dashboard/dashboard.component.ts","/Users/rimes/Desktop/NAMAN/frontend1/src/app/components/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { FormService } from 'src/app/services/form.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  loginForm!: FormGroup;\n\n  constructor(\n    private formStateService: FormService,\n    private formBuilder: FormBuilder,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm(): void {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  login(): void {\n    if (this.loginForm.invalid) {\n      // Form is invalid, do not proceed with login\n      return;\n    }\n\n    const { username, password } = this.loginForm.value;\n\n    this.formStateService.login({ username, password }).subscribe(\n      (response) => {\n        localStorage.setItem('token', response.token);\n        this.router.navigate(['/formbuilder']);\n      },\n      (error) => {\n        console.error('Login failed:', error);\n      }\n    );\n  }\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" formControlName=\"username\" />\n\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" formControlName=\"password\" />\n\n  <button type=\"submit\" [disabled]=\"loginForm.invalid\">Login</button>\n</form>\n"],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AASnE,OAAM,MAAOC,kBAAkB;EAG7BC,YACUC,gBAA6B,EAC7BC,WAAwB,EACxBC,MAAc;IAFd,KAAAF,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ;KACnC,CAAC;EACJ;EAEAE,KAAKA,CAAA;IACH,IAAI,IAAI,CAACL,SAAS,CAACM,OAAO,EAAE;MAC1B;MACA;;IAGF,MAAM;MAAEJ,QAAQ;MAAEE;IAAQ,CAAE,GAAG,IAAI,CAACJ,SAAS,CAACO,KAAK;IAEnD,IAAI,CAACZ,gBAAgB,CAACU,KAAK,CAAC;MAAEH,QAAQ;MAAEE;IAAQ,CAAE,CAAC,CAACI,SAAS,CAC1DC,QAAQ,IAAI;MACXC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,KAAK,CAAC;MAC7C,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;IACxC,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,CACF;EACH;EAAC,QAAAE,CAAA,G;qBArCUvB,kBAAkB,EAAAwB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAlBhC,kBAAkB;IAAAiC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCV/Bf,EAAA,CAAAiB,cAAA,cAAmD;QAArBjB,EAAA,CAAAkB,UAAA,sBAAAC,qDAAA;UAAA,OAAYH,GAAA,CAAA5B,KAAA,EAAO;QAAA,EAAC;QAChDY,EAAA,CAAAiB,cAAA,eAAsB;QAAAjB,EAAA,CAAAoB,MAAA,gBAAS;QAAApB,EAAA,CAAAqB,YAAA,EAAQ;QACvCrB,EAAA,CAAAsB,SAAA,eAA8D;QAE9DtB,EAAA,CAAAiB,cAAA,eAAsB;QAAAjB,EAAA,CAAAoB,MAAA,gBAAS;QAAApB,EAAA,CAAAqB,YAAA,EAAQ;QACvCrB,EAAA,CAAAsB,SAAA,eAAkE;QAElEtB,EAAA,CAAAiB,cAAA,gBAAqD;QAAAjB,EAAA,CAAAoB,MAAA,YAAK;QAAApB,EAAA,CAAAqB,YAAA,EAAS;;;QAP/DrB,EAAA,CAAAuB,UAAA,cAAAP,GAAA,CAAAjC,SAAA,CAAuB;QAOLiB,EAAA,CAAAwB,SAAA,GAA8B;QAA9BxB,EAAA,CAAAuB,UAAA,aAAAP,GAAA,CAAAjC,SAAA,CAAAM,OAAA,CAA8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
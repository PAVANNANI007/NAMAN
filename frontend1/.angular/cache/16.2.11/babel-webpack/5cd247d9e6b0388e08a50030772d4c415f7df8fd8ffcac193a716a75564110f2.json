{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/form.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/button\";\nexport class DashboardComponent {\n  constructor(formStateService, formBuilder, router) {\n    this.formStateService = formStateService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.username = '';\n    this.password = '';\n  }\n  // login() {\n  //   this.formStateService.login(this.username, this.password).subscribe((response) => {\n  //     // Handle successful login\n  //     console.log('Login successful', response);\n  //   }, (error) => {\n  //     // Handle login error\n  //     console.error('Login failed', error);\n  //   });\n  // }\n  // loginForm:FormGroup = this.formBuilder.group({\n  //   username: ['', Validators.required],\n  //   password: ['', Validators.required]\n  // })\n  // login() {\n  //   console.log(this.loginForm)\n  //   this.formStateService.login(this.loginForm.value.username, this.loginForm.value.password).subscribe(res => {\n  //     if(res && res.message == \"Login successful\"){\n  //       localStorage.setItem(\"isAuthorised\", JSON.stringify(res));\n  //       this.router.navigate(['/formbuilder']);\n  //     }else{\n  //       alert(res.message);\n  //     }\n  //   })\n  // }\n  // saveForm() {\n  //   console.log('Form values to be saved:', this.form.value);\n  //   this.formStateService.logindetails(this.form.value)\n  //     .subscribe(\n  //       (response) => {\n  //         console.log('Form data saved successfully:', response);\n  //         this.form.reset();\n  //       },\n  //       (error) => {\n  //         console.error('Error saving form data:', error);\n  //       }\n  //     );\n  //     this.showRemoveButtons = false;\n  // }\n  login() {\n    console.log(this.username, this.password);\n    this.formStateService.login(this.username, this.password).subscribe({\n      next: response => {\n        console.log('Login successful', response);\n      },\n      error: error => {\n        console.error('Login failed', error);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.FormService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 7,\n    vars: 2,\n    consts: [[\"matInput\", \"\", \"placeholder\", \"Username\", \"name\", \"username\", \"required\", \"\", 1, \"user\", 3, \"ngModel\", \"ngModelChange\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Password\", \"name\", \"password\", \"required\", \"\", 1, \"user\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"user\", 3, \"click\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\")(1, \"mat-form-field\")(2, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.username = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"mat-form-field\")(4, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_4_listener($event) {\n          return ctx.password = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_5_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵtext(6, \"Login\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.username);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.password);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm, i4.MatInput, i5.MatFormField, i6.MatButton],\n    styles: [\".user[_ngcontent-%COMP%]{\\n    margin: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0FBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiLnVzZXJ7XG4gICAgbWFyZ2luOiAxMHB4O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["DashboardComponent","constructor","formStateService","formBuilder","router","username","password","login","console","log","subscribe","next","response","error","_","i0","ɵɵdirectiveInject","i1","FormService","i2","FormBuilder","i3","Router","_2","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","DashboardComponent_Template_input_ngModelChange_2_listener","$event","ɵɵelementEnd","DashboardComponent_Template_input_ngModelChange_4_listener","DashboardComponent_Template_button_click_5_listener","ɵɵtext","ɵɵadvance","ɵɵproperty"],"sources":["/Users/rimes/Desktop/NAMAN/frontend1/src/app/components/dashboard/dashboard.component.ts","/Users/rimes/Desktop/NAMAN/frontend1/src/app/components/dashboard/dashboard.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, TitleStrategy } from '@angular/router';\nimport { FormService } from 'src/app/services/form.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent {\n  username: string = '';\n  password: string = '';\n  constructor( private formStateService: FormService,  private formBuilder: FormBuilder, private router: Router,) { }\n\n\n\n  \n  // login() {\n  //   this.formStateService.login(this.username, this.password).subscribe((response) => {\n  //     // Handle successful login\n  //     console.log('Login successful', response);\n  //   }, (error) => {\n  //     // Handle login error\n  //     console.error('Login failed', error);\n  //   });\n  // }\n\n  // loginForm:FormGroup = this.formBuilder.group({\n  //   username: ['', Validators.required],\n  //   password: ['', Validators.required]\n  // })\n  \n\n  // login() {\n  //   console.log(this.loginForm)\n  //   this.formStateService.login(this.loginForm.value.username, this.loginForm.value.password).subscribe(res => {\n  //     if(res && res.message == \"Login successful\"){\n  //       localStorage.setItem(\"isAuthorised\", JSON.stringify(res));\n  //       this.router.navigate(['/formbuilder']);\n  //     }else{\n  //       alert(res.message);\n  //     }\n  //   })\n  // }\n\n\n  // saveForm() {\n  //   console.log('Form values to be saved:', this.form.value);\n  //   this.formStateService.logindetails(this.form.value)\n  //     .subscribe(\n  //       (response) => {\n  //         console.log('Form data saved successfully:', response);\n  //         this.form.reset();\n  //       },\n  //       (error) => {\n  //         console.error('Error saving form data:', error);\n  //       }\n  //     );\n  //     this.showRemoveButtons = false;\n  // }\n\n\n  login() {\n    console.log(this.username, this.password)\n    this.formStateService.login(this.username, this.password).subscribe({\n      next: (response) => {\n        console.log('Login successful', response);\n      },\n      error: (error) => {\n        console.error('Login failed', error);\n      }\n    });\n  }\n  \n\n}\n","<!-- login.component.html -->\n<form>\n    <mat-form-field>\n      <input matInput placeholder=\"Username\" class=\"user\" [(ngModel)]=\"username\" name=\"username\" required>\n    </mat-form-field>\n  \n    <mat-form-field>\n      <input matInput type=\"password\" placeholder=\"Password\" class=\"user\" [(ngModel)]=\"password\" name=\"password\" required>\n    </mat-form-field>\n  \n    <button mat-raised-button color=\"primary\" class=\"user\" (click)=\"login()\">Login</button>\n  </form>\n  "],"mappings":";;;;;;;AAUA,OAAM,MAAOA,kBAAkB;EAG7BC,YAAqBC,gBAA6B,EAAWC,WAAwB,EAAUC,MAAc;IAAxF,KAAAF,gBAAgB,GAAhBA,gBAAgB;IAAwB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAFrG,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAW,EAAE;EAC6F;EAKlH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGAC,KAAKA,CAAA;IACHC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC;IACzC,IAAI,CAACJ,gBAAgB,CAACK,KAAK,CAAC,IAAI,CAACF,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC,CAACI,SAAS,CAAC;MAClEC,IAAI,EAAGC,QAAQ,IAAI;QACjBJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEG,QAAQ,CAAC;MAC3C,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACfL,OAAO,CAACK,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;KACD,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBA/DUd,kBAAkB,EAAAe,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAlBvB,kBAAkB;IAAAwB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCT/Bf,EAAA,CAAAiB,cAAA,WAAM;QAEoDjB,EAAA,CAAAkB,UAAA,2BAAAC,2DAAAC,MAAA;UAAA,OAAAJ,GAAA,CAAA1B,QAAA,GAAA8B,MAAA;QAAA,EAAsB;QAA1EpB,EAAA,CAAAqB,YAAA,EAAoG;QAGtGrB,EAAA,CAAAiB,cAAA,qBAAgB;QACsDjB,EAAA,CAAAkB,UAAA,2BAAAI,2DAAAF,MAAA;UAAA,OAAAJ,GAAA,CAAAzB,QAAA,GAAA6B,MAAA;QAAA,EAAsB;QAA1FpB,EAAA,CAAAqB,YAAA,EAAoH;QAGtHrB,EAAA,CAAAiB,cAAA,gBAAyE;QAAlBjB,EAAA,CAAAkB,UAAA,mBAAAK,oDAAA;UAAA,OAASP,GAAA,CAAAxB,KAAA,EAAO;QAAA,EAAC;QAACQ,EAAA,CAAAwB,MAAA,YAAK;QAAAxB,EAAA,CAAAqB,YAAA,EAAS;;;QAPjCrB,EAAA,CAAAyB,SAAA,GAAsB;QAAtBzB,EAAA,CAAA0B,UAAA,YAAAV,GAAA,CAAA1B,QAAA,CAAsB;QAINU,EAAA,CAAAyB,SAAA,GAAsB;QAAtBzB,EAAA,CAAA0B,UAAA,YAAAV,GAAA,CAAAzB,QAAA,CAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
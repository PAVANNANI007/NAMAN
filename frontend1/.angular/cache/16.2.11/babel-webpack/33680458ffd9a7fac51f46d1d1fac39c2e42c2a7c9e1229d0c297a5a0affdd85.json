{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/form.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/button\";\nexport class DashboardComponent {\n  constructor(formStateService, formBuilder, router) {\n    this.formStateService = formStateService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.username = '';\n    this.password = '';\n  }\n  login(username, password) {\n    const credentials = {\n      username,\n      password\n    };\n    // Send a POST request to the server\n    this.http.post('http://localhost:3000/login', credentials).subscribe(response => {\n      // Successful login\n      console.log(response.token);\n      // Save the token in localStorage or a secure storage\n      localStorage.setItem('token', response.token);\n    }, error => {\n      // Handle login error\n      console.error(error);\n    });\n  }\n  static #_ = this.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.FormService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 7,\n    vars: 2,\n    consts: [[1, \"user\"], [\"matInput\", \"\", \"placeholder\", \"Username\", \"name\", \"username\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Password\", \"name\", \"password\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"user\", 3, \"click\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\")(1, \"mat-form-field\", 0)(2, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.username = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"mat-form-field\", 0)(4, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_4_listener($event) {\n          return ctx.password = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_5_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵtext(6, \"Login\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.username);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.password);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm, i4.MatInput, i5.MatFormField, i6.MatButton],\n    styles: [\".user[_ngcontent-%COMP%]{\\n    margin: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0FBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiLnVzZXJ7XG4gICAgbWFyZ2luOiAxMHB4O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["DashboardComponent","constructor","formStateService","formBuilder","router","username","password","login","credentials","http","post","subscribe","response","console","log","token","localStorage","setItem","error","_","i0","ɵɵdirectiveInject","i1","FormService","i2","FormBuilder","i3","Router","_2","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","DashboardComponent_Template_input_ngModelChange_2_listener","$event","ɵɵelementEnd","DashboardComponent_Template_input_ngModelChange_4_listener","DashboardComponent_Template_button_click_5_listener","ɵɵtext","ɵɵadvance","ɵɵproperty"],"sources":["/Users/rimes/Desktop/NAMAN/frontend1/src/app/components/dashboard/dashboard.component.ts","/Users/rimes/Desktop/NAMAN/frontend1/src/app/components/dashboard/dashboard.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, TitleStrategy } from '@angular/router';\nimport { FormService } from 'src/app/services/form.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent {\n  username: string = '';\n  password: string = '';\n  http: any;\n  constructor( private formStateService: FormService,  private formBuilder: FormBuilder, private router: Router,) { }\n  \n  login(username: string, password: string): void {\n    const credentials = { username, password };\n\n    // Send a POST request to the server\n    this.http.post('http://localhost:3000/login', credentials)\n      .subscribe(\n        (response: any) => {\n          // Successful login\n          console.log(response.token);\n\n          // Save the token in localStorage or a secure storage\n          localStorage.setItem('token', response.token);\n        },\n        (error: any) => {\n          // Handle login error\n          console.error(error);\n        }\n      );\n  }\n  // login() {\n  //   console.log(this.username, this.password)\n  //   this.formStateService.login(this.username, this.password).subscribe({\n  //     next: (response) => {\n  //       console.log('Login successful', response);\n  //     },\n  //     error: (error) => {\n  //       console.error('Login failed', error);\n  //     }\n  //   });\n  // }\n}\n","<!-- login.component.html -->\n<form>\n    <mat-form-field class=\"user\">\n      <input matInput placeholder=\"Username\"  [(ngModel)]=\"username\" name=\"username\" required>\n    </mat-form-field>\n  \n    <mat-form-field class=\"user\">\n      <input matInput type=\"password\" placeholder=\"Password\" [(ngModel)]=\"password\" name=\"password\" required>\n    </mat-form-field>\n    <button mat-raised-button color=\"primary\" class=\"user\" (click)=\"login()\">Login</button>\n  </form>\n  "],"mappings":";;;;;;;AAUA,OAAM,MAAOA,kBAAkB;EAI7BC,YAAqBC,gBAA6B,EAAWC,WAAwB,EAAUC,MAAc;IAAxF,KAAAF,gBAAgB,GAAhBA,gBAAgB;IAAwB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAHrG,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAW,EAAE;EAE6F;EAElHC,KAAKA,CAACF,QAAgB,EAAEC,QAAgB;IACtC,MAAME,WAAW,GAAG;MAAEH,QAAQ;MAAEC;IAAQ,CAAE;IAE1C;IACA,IAAI,CAACG,IAAI,CAACC,IAAI,CAAC,6BAA6B,EAAEF,WAAW,CAAC,CACvDG,SAAS,CACPC,QAAa,IAAI;MAChB;MACAC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,KAAK,CAAC;MAE3B;MACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACG,KAAK,CAAC;IAC/C,CAAC,EACAG,KAAU,IAAI;MACb;MACAL,OAAO,CAACK,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACL;EAAC,QAAAC,CAAA,G;qBAxBUnB,kBAAkB,EAAAoB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAlB5B,kBAAkB;IAAA6B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCT/Bf,EAAA,CAAAiB,cAAA,WAAM;QAEwCjB,EAAA,CAAAkB,UAAA,2BAAAC,2DAAAC,MAAA;UAAA,OAAAJ,GAAA,CAAA/B,QAAA,GAAAmC,MAAA;QAAA,EAAsB;QAA9DpB,EAAA,CAAAqB,YAAA,EAAwF;QAG1FrB,EAAA,CAAAiB,cAAA,wBAA6B;QAC4BjB,EAAA,CAAAkB,UAAA,2BAAAI,2DAAAF,MAAA;UAAA,OAAAJ,GAAA,CAAA9B,QAAA,GAAAkC,MAAA;QAAA,EAAsB;QAA7EpB,EAAA,CAAAqB,YAAA,EAAuG;QAEzGrB,EAAA,CAAAiB,cAAA,gBAAyE;QAAlBjB,EAAA,CAAAkB,UAAA,mBAAAK,oDAAA;UAAA,OAASP,GAAA,CAAA7B,KAAA,EAAO;QAAA,EAAC;QAACa,EAAA,CAAAwB,MAAA,YAAK;QAAAxB,EAAA,CAAAqB,YAAA,EAAS;;;QAN7CrB,EAAA,CAAAyB,SAAA,GAAsB;QAAtBzB,EAAA,CAAA0B,UAAA,YAAAV,GAAA,CAAA/B,QAAA,CAAsB;QAIPe,EAAA,CAAAyB,SAAA,GAAsB;QAAtBzB,EAAA,CAAA0B,UAAA,YAAAV,GAAA,CAAA9B,QAAA,CAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FormService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000'; // Update with your server URL\n    this.valueSubject = new BehaviorSubject('');\n    this.value$ = this.valueSubject.asObservable();\n  }\n  updateFormData(formDetails) {\n    return this.http.post(`${this.apiUrl}/forms`, formDetails);\n  }\n  getFormData() {\n    return this.http.get(`${this.apiUrl}/forms`);\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    });\n  }\n  getAuthStatus() {\n    var token = localStorage.getItem('isAuthorised');\n    console.log(token);\n    if (token) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  setValue(newValue) {\n    this.valueSubject.next(newValue);\n  }\n  static #_ = this.ɵfac = function FormService_Factory(t) {\n    return new (t || FormService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormService,\n    factory: FormService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","FormService","constructor","http","apiUrl","valueSubject","value$","asObservable","updateFormData","formDetails","post","getFormData","get","login","username","password","getAuthStatus","token","localStorage","getItem","console","log","setValue","newValue","next","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/rimes/Desktop/NAMAN/frontend1/src/app/services/form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  private apiUrl = 'http://localhost:3000'; // Update with your server URL\n\n  constructor(private http: HttpClient) {}\n  updateFormData(formDetails: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/forms`, formDetails);\n  }\n  getFormData(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/forms`);\n  }\n  login(username: string, password: string): Observable<any> {\n    return this.http.post(`${this.apiUrl}/login`, { username, password });\n  }\n  getAuthStatus(){\n    var token = localStorage.getItem('isAuthorised');\n    console.log(token)\n    if(token){\n      return true\n    }else{\n      return false\n    }\n  }\n  private valueSubject = new BehaviorSubject<string>('');\n  public value$ = this.valueSubject.asObservable();\n  setValue(newValue: string) {\n    this.valueSubject.next(newValue);\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;;AAKlD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB,CAAC,CAAC;IAqBlC,KAAAC,YAAY,GAAG,IAAIL,eAAe,CAAS,EAAE,CAAC;IAC/C,KAAAM,MAAM,GAAG,IAAI,CAACD,YAAY,CAACE,YAAY,EAAE;EApBT;EACvCC,cAAcA,CAACC,WAAgB;IAC7B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACN,MAAM,QAAQ,EAAEK,WAAW,CAAC;EAC5D;EACAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAQ,GAAG,IAAI,CAACR,MAAM,QAAQ,CAAC;EACrD;EACAS,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACZ,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACN,MAAM,QAAQ,EAAE;MAAEU,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EACvE;EACAC,aAAaA,CAAA;IACX,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAChDC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;IAClB,IAAGA,KAAK,EAAC;MACP,OAAO,IAAI;KACZ,MAAI;MACH,OAAO,KAAK;;EAEhB;EAGAK,QAAQA,CAACC,QAAgB;IACvB,IAAI,CAAClB,YAAY,CAACmB,IAAI,CAACD,QAAQ,CAAC;EAClC;EAAC,QAAAE,CAAA,G;qBA3BUxB,WAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX7B,WAAW;IAAA8B,OAAA,EAAX9B,WAAW,CAAA+B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}